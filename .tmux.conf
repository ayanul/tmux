# if run as "tmux attach", create a session if one does not already exist
new-session -n $HOST

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal screen-256color
set -g terminal-overrides "xterm*:XT:smcup@:rmcup@"

set -g history-limit 15000
set -g buffer-limit 70

# No escape time for vi mode
set -sg escape-time 0
set -g display-time 1500
set -g remain-on-exit off
set -g repeat-time 300

# control automatic window renaming
set-window-option -g automatic-rename on # auto name
setw -g automatic-rename off
setw -g allow-rename off
setw -g aggressive-resize 0

# set first window to index 1 (not 0) to map more to the keyboard layout
set -g base-index 1
set -g pane-base-index 1

# support logging out and back in
set -g update-environment "DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION SSH_TTY WINDOWID XAUTHORITY"

# vi mode
set-window-option -g mode-keys vi

# Enable mouse
set -g mouse on

# =====================================
# ===           Key bindings
# =====================================
# Copy from tmux to system clipboard
# For vi copy mode bindings
setw -g mode-keys vi
set-option -s set-clipboard on
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -selection clipboard -i"

set -g default-command /bin/fish
set -g default-shell /bin/fish

# Set the prefix to ^A.
unbind C-b
set -g prefix ^A
bind a send-prefix

# list all paste buffers (default key is '#')
bind b list-buffers

# choose buffer to paste interactively (default key was '=')
bind P choose-buffer

# delete the most recently copied buffer of text (default key was '-')
bind x delete-buffer

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
unbind e
unbind E
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# Redraw the client (if interrupted by wall, etc)
unbind R
bind R refresh-client

# reload tmux config with ctrl + a + r
unbind r
bind r \
    source-file ~/.tmux.conf \; display 'Reloaded tmux config.'

# =====================================
# ===           Session & Panels
# =====================================
unbind C-O
bind C-O rotate-window
bind space select-pane -t:.+

# kill current pane/window
bind q confirm-before kill-pane
bind Q confirm-before kill-window

# C + control q to kill session
unbind C-q
bind C-q confirm-before kill-session

# Ctrl + a + n : New session
unbind n
unbind C-n
#bind n new-session
bind M-t new-session

# Ctrl + a + n : next session
unbind n
unbind C-n
bind n next-window
bind C-n next-window

# Ctrl - t or t new window
unbind t
#unbind C-t
bind t new-window
#bind C-t new-window
bind C-t new-window -c "#{pane_current_path}" \; split-window -h -c "#{pane_current_path}" \; select-pane -L

## New window with and split horizontally
bind c new-window -c "#{pane_current_path}" \; split-window -h -c "#{pane_current_path}" \; select-pane -L

# Ctrl + a + Alt + o : display panes
unbind M-o
bind M-o display-panes

# Ctrl + a + C + o : display panes
unbind C-o
bind C-o next-layout

## Split
# Vertical splits with g or C-g
unbind g
unbind -
unbind C-g
bind g split-window -h
bind - split-window -h
bind C-g split-window -h

# Horizontal splits with v or C-h
unbind h
unbind |
    unbind C-h
bind h split-window
bind | split-window
bind C-h split-window

# move windows
bind -n C-S-Left swap-window -t -1\; select-window -t -1
bind -n C-S-Right swap-window -t +1\; select-window -t +1

# Screen like binding for last window
unbind l
bind C-a last-window

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to shift-ctrl-<h,j,k,l>
bind J resize-pane -D 50
bind K resize-pane -U 50
bind H resize-pane -L 50
bind L resize-pane -R 50
bind up resize-pane -U 5
bind down resize-pane -D 5
bind left resize-pane -L 5
bind right resize-pane -R 5

# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

bind C-l send-keys 'C-l'

# shortcuts
bind _ split-window -l 20 -c "#{pane_current_path}" node

# =====================================
# ===           Theme
# =====================================
color_orange="colour166" # 208, 166
color_purple="colour135" # 135, 134
color_green="colour076"  # 070 076
color_blue="colour39"    # 39
color_yellow="colour220"
color_red="colour160"
color_black="colour234"
color_white="colour253" # 015
color_gray="colour253"

color_dark="$color_black"
color_light="$color_white"
color_session_text="$color_yellow"
color_status_text="$color_white"
color_main="colour014" # 036
color_secondary="$color_purple"
color_level_ok="$color_green"
color_level_warn="$color_yellow"
color_level_stress="$color_red"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"

# =====================================
# ===    Appearence and status bar
# ======================================
set -g mode-style "fg=default,bg=$color_main"

# command line style
set -g message-style "fg=$color_dark,bg=$color_light"

# status line style
set -g status-style "fg=$color_status_text,bg=$color_dark"

# window segments in status line
set -g window-status-separator ""
separator_powerline_left=""
separator_powerline_right=""

# setw -g window-status-style "fg=$color_status_text,bg=$color_dark"
setw -g window-status-format " #I:#W"
setw -g window-status-current-style "fg=$color_light,bold,bg=$color_main"
setw -g window-status-current-format "#[fg=$color_dark,bg=$color_main]$separator_powerline_right#[default] #I:#W# #[fg=$color_main,bg=$color_dark]$separator_powerline_right#[default]"

# when window has monitoring notification
setw -g window-status-activity-style "fg=$color_main"

# outline for active pane
setw -g pane-active-border-style "fg=$color_orange"
setw -g pane-border-style "fg=$color_dark"

# general status bar settings
set -g status on
set -g status-interval 5
set -g status-position top
set -g status-justify left
set -g status-right-length 100

# define widgets we're going to use in status bar
# note, that this is not the complete list, some of them are loaded from plugins
wg_session="#[fg=$color_session_text] #S #[default]"
wg_is_zoomed="#[fg=$color_dark,bg=$color_secondary]#{?window_zoomed_flag,[Z],}#[default]"
#wg_date="#[fg=$color_secondary]%h %d %H:%M#[default]"
#wg_user_host="#[fg=$color_secondary]#(whoami)#[default]@#H"
# TODO: highlighted for nested local session as well
wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF')#[default]"

# status bar on the top
set -g status-left "$wg_session"
set -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed #{sysstat_cpu} | #{sysstat_mem} | #{sysstat_swap} | #{sysstat_loadavg}"
# wm window title string (uses statusbar variables)
set -g set-titles-string '#S:#I.#P #W' # window number,program name,active (or not)
# panel info
set-option -g pane-border-status top
setw -g pane-border-format '#{pane_tty} | #{pane_current_path}'

# online and offline icon for tmux-online-status
set -g @online_icon "#[fg=$color_level_ok]●#[default]"
set -g @offline_icon "#[fg=$color_level_stress]●#[default]"

# Configure view templates for tmux-plugin-sysstat "MEM" and "CPU" widget
set -g @sysstat_mem_view_tmpl 'MEM:#[fg=#{mem.color}]#{mem.pused}#[default] #{mem.used}'

# Configure colors for tmux-plugin-sysstat "MEM" and "CPU" widget
set -g @sysstat_cpu_color_low "$color_level_ok"
set -g @sysstat_cpu_color_medium "$color_level_warn"
set -g @sysstat_cpu_color_stress "$color_level_stress"

set -g @sysstat_mem_color_low "$color_level_ok"
set -g @sysstat_mem_color_medium "$color_level_warn"
set -g @sysstat_mem_color_stress "$color_level_stress"

set -g @sysstat_swap_color_low "$color_level_ok"
set -g @sysstat_swap_color_medium "$color_level_warn"
set -g @sysstat_swap_color_stress "$color_level_stress"

# Configure tmux-prefix-highlight colors
set -g @prefix_highlight_output_prefix '['
set -g @prefix_highlight_output_suffix ']'
set -g @prefix_highlight_fg "$color_dark"
set -g @prefix_highlight_bg "$color_secondary"
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$color_dark,bg=$color_secondary"

#####################################
# Plugins
# ctrl + b shift + i
####################################
# tpm plugin manager
set -g @tpm_plugins ' \
   tmux-plugins/tpm \
   tmux-plugins/tmux-prefix-highlight   \
   tmux-plugins/tmux-open  \
   samoshkin/tmux-plugin-sysstat \
   tmux-plugins/tmux-copycat \
   tmux-plugins/tmux-yank \
   tmux-plugins/tmux-resurrect \
   tmux-plugins/tmux-continuum \
   tmux-plugins/tmux-sensible \
'

set -g @open-S 'https://www.google.com/search?q='
set -g @yank_with_mouse on
set -g @yank_selection 'clipboard'
set -g @yank_selection_mouse 'clipboard'
# save and reload sessions and windows after a restart
# sessions : save - command + c + s && restore command + c + r

### tmux-resurrect extra settings ###
# keep vim sessions after reboot
set -g @resurrect-strategy-vim 'session'
# keep pane contents
set -g @resurrect-capture-pane-contents 'on'
# restore bash history
#set -g @resurrect-save-bash-history 'on'

### /tmux-resurrect extra settings ###
# tmux-continuum - automatically save and restore tmux sessions
# Restore last saved enviroment
set -g @continuum-restore 'on'
# Set autosave interval
set -g @continuum-save-interval '5'
# Show continiuum state in statusbar
#set -g status-right 'Continuum status: #{continuum_status}'

# initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
